                                Member function, static, constructor

1. Define a class Complex to represent a complex number with instance variables a and
b to store real and imaginary parts. Also define following member functions
a. void setData(int,int)
b. void showData()
c. Complex add(Complex)

#include <iostream>
using namespace std;

class Complex
{
private:
    int a;
    int b;

public:
    Complex(/* args */);
    void setData(int x, int y)
    {
        a = x;
        b = y;
    }
    void showData()
    {
        cout << a << " + i" << b;
    }
    Complex add(Complex c)
    {
        Complex temp;
        temp.a = a + c.a;
        temp.b = b + c.b;
        return temp;
    }
    void addTwo(Complex c1, Complex c2)
    {
        a = c1.a + c2.a;
        b = c1.b + c2.b;
    }
    ~Complex();
};

Complex::Complex(/* args */)
{
}

Complex::~Complex()
{
}

int main()
{
    Complex c1, c2, c3, c4;
    c1.setData(1, 2);
    c2.setData(3, 4);
    cout << "The complex-1 data is ";
    c1.showData();
    cout << endl;
    cout << "The complex-2 data is ";
    c2.showData();
    cout << endl;
    cout << "Method-1 of adding : \n";
    cout << "The sum of complex-1 and complex-2 is ";
    c3 = c1.add(c2);
    c3.showData();
    cout << endl;

    cout << "Method-2 of adding : \n";
    cout << "The sum of complex-1 and complex-2 is ";
    c4.addTwo(c1, c2);
    c4.showData();
    cout << endl;

    return 0;
}

2. Define a class Time to represent a time with instance variables h,m and s to store
hour, minute and second. Also define following member functions
a. void setTime(int,int,int)
b. void showTime()
c. void normalize()
d. Time add(Time)

#include <iostream>
using namespace std;

class Time
{
private:
    int hours;
    int minutes;
    int seconds;

public:
    Time(/* args */);
    void setTime(int h, int m, int s)
    {
        hours = h;
        minutes = m;
        seconds = s;
    }
    void showTime()
    {
        cout << hours << " hours " << minutes << " min " << seconds << " sec" << endl;
    }
    void normalize()
    {
        minutes = minutes + seconds / 60;
        seconds = seconds % 60;
        hours = hours + minutes / 60;
        minutes = minutes % 60;
    }
    Time addTime(Time t)
    {
        Time temp;
        temp.hours = t.hours + hours;
        temp.minutes = t.minutes + minutes;
        temp.seconds = t.seconds + seconds;
        return temp;
    }
    ~Time();
};

Time::Time(/* args */)
{
}

Time::~Time()
{
}

int main()
{
    Time c1, c2, c3;
    c1.setTime(3, 45, 20);
    c1.normalize();
    c1.showTime();

    c2.setTime(3, 60, 60);
    c2.normalize();
    c2.showTime();

    c3 = c1.addTime(c2);
    c3.normalize();
    c3.showTime();
    return 0;
}

3. Define a class Cube and calculate Volume of Cube and initialise it using constructor.



4. Define a class Counter and Write a program to Show Counter using Constructor.
5. Define a class Date and write a program to Display Dateand initialise date object
using Constructors.
6. Define a class student and write a program to enter student details using constructor
and define member function to display all the details.
7. Define a class Box and write a program to enter length, breadth and height and
initialise objects using constructor also define member functions to calculate volume
of the box.
8. Define a class Bank and define member functions to read principal , rate of interest
and year. Another member functions to calculate simple interest and display it.
Initialise all details using constructor.
9. Define a class Bill and define its member function get() to take detail of customer ,
calculateBill() function to calculate electricity bill using below tariff :
Upto 100 unit RS. 1.20 per unit
From 100 to 200 unit RS. 2 per unit
Above 200 units RS. 3 per unit.
10. Define a class StaticCount and create a static variable. Increment this variable in a
function and call this 3 times and display the result.