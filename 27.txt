

 Operator overloading and friend function


⦁	Define a class Complex with appropriate instance variables and member functions. Define following operators in the class:
a. +
⦁	-
⦁	*
d. ==
⦁	Write a C++ program to overload unary operators that is increment and decrement.
⦁	Write a C++ program to add two complex numbers using operator overloaded by a friend function.
⦁	Create a class Time which contains:
⦁	Hours
⦁	Minutes
⦁	Seconds
Write a C++ program using operator overloading for the following:
1. = = : To check whether two Times are the same or not.
⦁	>> : To accept the time.
 << : To display the time. Output -
⦁	Consider following class Numbers

class Numbers

{
int x,y,z; public:
// methods
};

Overload the operator unary minus (-) to negate the numbers.


⦁	Create a class CString to represent a string.

a) Overload the + operator to concatenate two strings.
b) == to compare 2 strings.
⦁	Define a C++ class fraction

class fraction
{
long numerator; long denominator;
Public:
fraction (long n=0, long d=0);
}

Overload the following operators as member or friend:

⦁	Unary ++ (pre and post both)
⦁	Overload as friend functions: operators << and >>. Output-

 

⦁	Consider a class Matrix

Class Matrix
{
int a[3][3]; Public:
//methods;
};

Overload the - (Unary) should negate the numbers stored in the object. Output -

 

⦁	Consider the following class mystring

Class mystring
{
char str [100]; Public:
// methods
};

Overload operator “!” to reverse the case of each alphabet in the string (Uppercase to Lowercase and vice versa).

⦁	Class Matrix
{
int a[3][3]; Public:
//methods;
};

Let m1 and m2 are two matrices. Find out m3=m1+m2 (use operator overloading).
Output -

Ente r	Hat r tx	Etenent	( 3	X	3)
4 5 6	1 2 3 7 8 9			

Ente r	
Hat r tx	Etenent	
( 3	
X	
3)	
:
1 2 3	4 5 6 7	8 9
First	Matrix	
4	5	6
	2	3
7	8	9
Second	Mat r tx	
1	2	3
4	5	6
7	8	9
